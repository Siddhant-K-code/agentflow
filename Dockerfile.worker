# Multi-stage build for AgentFlow Worker
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the worker binary
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o worker ./cmd/worker

# Final stage
FROM alpine:3.18

# Install runtime dependencies and tools for WASI/containers
RUN apk --no-cache add ca-certificates tzdata curl wget xz

# Install wasmtime for WASI support
RUN WASMTIME_VERSION="25.0.1" && \
    ARCH=$(uname -m) && \
    if [ "$ARCH" = "x86_64" ]; then WASMTIME_ARCH="x86_64"; \
    elif [ "$ARCH" = "aarch64" ]; then WASMTIME_ARCH="aarch64"; \
    else echo "Unsupported architecture: $ARCH" && exit 1; fi && \
    curl -sSL "https://github.com/bytecodealliance/wasmtime/releases/download/v${WASMTIME_VERSION}/wasmtime-v${WASMTIME_VERSION}-${WASMTIME_ARCH}-linux.tar.xz" | \
    tar -xJ -C /tmp && \
    mv "/tmp/wasmtime-v${WASMTIME_VERSION}-${WASMTIME_ARCH}-linux/wasmtime" /usr/local/bin/ && \
    rm -rf /tmp/wasmtime-* && \
    chmod +x /usr/local/bin/wasmtime && \
    wasmtime --version

# Create non-root user
RUN addgroup -g 1001 agentflow && \
    adduser -D -s /bin/sh -u 1001 -G agentflow agentflow

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/worker .

# Create directories for configs, data, and function execution
RUN mkdir -p /app/configs /app/data /app/functions /app/tmp && \
    chown -R agentflow:agentflow /app

# Switch to non-root user
USER agentflow

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD pgrep -f worker || exit 1

# Set entrypoint
ENTRYPOINT ["./worker"]